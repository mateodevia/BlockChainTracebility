{"version":3,"sources":["components/Grupo/Grupo.jsx","components/GraphViz/GraphViz.jsx","App.js","serviceWorker.js","index.js"],"names":["Grupo","props","useState","undefined","actividad","setActividad","grupos","setGrupos","lines","setLines","lines2","setLines2","calculateXCoordinate","tru","element","document","getElementById","id","parent","parentElement","console","log","parentOffset","getBoundingClientRect","left","renderLines","newLines","produce","map","i","key","className","x1","y1","x2","y2","style","stroke","colores","due単oActual","renderLines2","grupo","actor","handleActualizar","handleactualizar","useEffect","newActividad","actividades","find","act","consumidoPor","newGrupos","truAct","siguiente","push","Object","values","backgroundColor","coloresClaros","transacciones","fuente","borderColor","trans","Fragment","tipo","GraphViz","buscado","setBuscado","setActividades","actualizar","Propilco","Cartoflex","Transportador","Canvan","handleResize","window","addEventListener","fetch","then","response","json","data","reverse","destino","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d4984d93.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Grupo.css\";\r\nimport \"./Trus.css\";\r\nimport \"./Actividades.css\";\r\nimport \"./Lineas.css\";\r\nimport \"./Transacciones.css\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction Grupo(props) {\r\n  let [actividad, setActividad] = useState(undefined);\r\n  let [grupos, setGrupos] = useState([]);\r\n  let [lines, setLines] = useState(<div></div>);\r\n  let [lines2, setLines2] = useState(<div></div>);\r\n\r\n  let calculateXCoordinate = (tru) => {\r\n    let element = document.getElementById(tru.id);\r\n    let parent = element?.parentElement.parentElement.parentElement;\r\n    console.log(parent);\r\n    let parentOffset = parent?.getBoundingClientRect().left;\r\n    let x = element?.getBoundingClientRect().left + 12 - parentOffset;\r\n    return x;\r\n  };\r\n\r\n  let renderLines = () => {\r\n    let newLines = actividad?.produce.map((tru, i) => {\r\n      return (\r\n        <line\r\n          key={i}\r\n          className=\"linea\"\r\n          x1=\"50%\"\r\n          y1=\"0\"\r\n          x2={calculateXCoordinate(tru)}\r\n          y2=\"50\"\r\n          style={{\r\n            stroke: props.colores[tru?.due単oActual],\r\n          }}\r\n        />\r\n      );\r\n    });\r\n    setLines(newLines);\r\n  };\r\n  let renderLines2 = () => {\r\n    let newLines = props.grupo.map((tru, i) => {\r\n      return (\r\n        <line\r\n          key={i}\r\n          className=\"linea\"\r\n          x1={calculateXCoordinate(tru)}\r\n          y1=\"0\"\r\n          x2=\"50%\"\r\n          y2=\"50\"\r\n          style={{\r\n            stroke: props.colores[actividad?.actor],\r\n          }}\r\n        />\r\n      );\r\n    });\r\n    setLines2(newLines);\r\n  };\r\n\r\n  let handleActualizar = () => {\r\n    props.handleactualizar({});\r\n    renderLines();\r\n    renderLines2();\r\n  };\r\n\r\n  useEffect(() => {\r\n    let newActividad = props.actividades.find(\r\n      (act) => act.id === props.grupo[0].consumidoPor\r\n    );\r\n\r\n    let newGrupos = {};\r\n    for (let i in newActividad?.produce) {\r\n      let truAct = newActividad?.produce[i];\r\n      let siguiente = truAct.consumidoPor || truAct.id;\r\n      if (newGrupos[siguiente]) {\r\n        newGrupos[siguiente].push(truAct);\r\n      } else {\r\n        newGrupos[siguiente] = [truAct];\r\n      }\r\n    }\r\n    setGrupos(Object.values(newGrupos));\r\n    setActividad(newActividad);\r\n    /**\r\n    let newGrupo = [...props.grupo];\r\n    for (let i in newGrupo) {\r\n      newGrupo[i].x =\r\n        document.getElementById(newGrupo[i].id).getBoundingClientRect().left +\r\n        12;\r\n    }*/\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    props.handleactualizar({});\r\n    renderLines();\r\n    renderLines2();\r\n  }, [grupos]);\r\n\r\n  return (\r\n    <div className=\"contenedorGrupo\">\r\n      {props.grupo.map((tru) => {\r\n        return (\r\n          <div className=\"contenedorTru\">\r\n            <div\r\n              className=\"tru\"\r\n              id={tru.id}\r\n              style={{\r\n                backgroundColor:\r\n                  props.coloresClaros[\r\n                    tru?.transacciones[0]?.fuente || tru?.due単oActual\r\n                  ],\r\n                borderColor:\r\n                  props.colores[\r\n                    tru?.transacciones[0]?.fuente || tru?.due単oActual\r\n                  ],\r\n              }}\r\n            ></div>\r\n            {tru?.transacciones.map((trans, i) => (\r\n              <React.Fragment>\r\n                <svg className=\"lineasCortas\">\r\n                  <line\r\n                    key={i}\r\n                    className=\"linea\"\r\n                    x1=\"50%\"\r\n                    y1=\"0\"\r\n                    x2=\"50%\"\r\n                    y2=\"50\"\r\n                    style={{\r\n                      stroke: props.colores[trans.fuente],\r\n                    }}\r\n                  />\r\n                </svg>\r\n                <div className=\"transaccion\"></div>\r\n              </React.Fragment>\r\n            ))}\r\n          </div>\r\n        );\r\n      })}\r\n      {actividad && (\r\n        <React.Fragment>\r\n          <svg className=\"lineas\">{lines2}</svg>\r\n          <div\r\n            id={actividad.id}\r\n            className=\"actividad\"\r\n            style={{\r\n              backgroundColor: props.coloresClaros[actividad?.actor],\r\n              borderColor: props.colores[actividad?.actor],\r\n            }}\r\n          >\r\n            {actividad.tipo}\r\n          </div>\r\n          <svg className=\"lineas\">{lines}</svg>\r\n        </React.Fragment>\r\n      )}\r\n      <div className=\"contenedorGrupos\">\r\n        {grupos.map((grupo) => (\r\n          <Grupo\r\n            grupo={grupo}\r\n            handleactualizar={handleActualizar}\r\n            actividades={props.actividades}\r\n            colores={props.colores}\r\n            coloresClaros={props.coloresClaros}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Grupo;\r\n","import React from \"react\";\r\nimport \"./GraphViz.css\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport Grupo from \"../Grupo/Grupo\";\r\n\r\nfunction GraphViz() {\r\n  let [buscado, setBuscado] = useState(undefined);\r\n  let [actividades, setActividades] = useState([]);\r\n  let [grupos, setGrupos] = useState([]);\r\n  let [lines, setLines] = useState(<div></div>);\r\n  let [actualizar, setActualizar] = useState(false);\r\n  let colores = {\r\n    Propilco: \"rgb(12, 124, 186)\",\r\n    Cartoflex: \"rgb(122, 182, 72)\",\r\n    Transportador: \"rgb(128, 0, 255)\",\r\n    Canvan: \"rgb(255, 128, 0)\",\r\n  };\r\n\r\n  let coloresClaros = {\r\n    Propilco: \"rgb(12, 124, 186, 0.2)\",\r\n    Cartoflex: \"rgb(122, 182, 72, 0.2)\",\r\n    Transportador: \"rgb(128, 0, 255, 0.2)\",\r\n    Canvan: \"rgb(255, 128, 0, 0.2)\",\r\n  };\r\n\r\n  let calculateXCoordinate = (tru) => {\r\n    let x = document.getElementById(tru.id)?.getBoundingClientRect().left + 12;\r\n    return x;\r\n  };\r\n\r\n  let renderLines = () => {\r\n    let newLines = actividades[0]?.produce.map((tru, i) => {\r\n      return (\r\n        <line\r\n          key={i}\r\n          className=\"linea\"\r\n          x1=\"50%\"\r\n          y1=\"0\"\r\n          x2={calculateXCoordinate(tru)}\r\n          y2=\"50\"\r\n          style={{\r\n            stroke: colores[actividades[0]?.actor],\r\n          }}\r\n        />\r\n      );\r\n    });\r\n    setLines(newLines);\r\n  };\r\n\r\n  let handleResize = () => {\r\n    //hacer algo para que se vuelva a renderizar el grafo\r\n    renderLines();\r\n  };\r\n\r\n  let handleactualizar = () => {\r\n    renderLines();\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", handleResize);\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      \"/v1/api/trus/id/efa91e20-7413-11ea-9fdf-2174e1b0eb66-0/destino\"\r\n    ).then((response) => {\r\n      response.json().then((data) => {\r\n        data.actividades.reverse();\r\n        let newGrupos = {};\r\n        for (let i in data.actividades[0]?.produce) {\r\n          let truAct = data.actividades[0]?.produce[i];\r\n          let siguiente = truAct.consumidoPor || truAct.id;\r\n          if (newGrupos[siguiente]) {\r\n            newGrupos[siguiente].push(truAct);\r\n          } else {\r\n            newGrupos[siguiente] = [truAct];\r\n          }\r\n        }\r\n        setActividades(data.actividades);\r\n        setBuscado(data.tru);\r\n        setGrupos(Object.values(newGrupos));\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"contenedorBuscado\">\r\n        <div\r\n          className=\"buscado\"\r\n          style={{\r\n            backgroundColor: coloresClaros[buscado?.due単oActual],\r\n            borderColor: colores[buscado?.due単oActual],\r\n          }}\r\n        ></div>\r\n      </div>\r\n      <svg className=\"lineas\">\r\n        <line\r\n          className=\"linea\"\r\n          x1=\"50%\"\r\n          y1=\"0\"\r\n          x2=\"50%\"\r\n          y2=\"50\"\r\n          style={{\r\n            stroke: colores[buscado?.due単oActual],\r\n          }}\r\n        />\r\n      </svg>\r\n      {buscado?.transacciones.map((trans, i) => (\r\n        <React.Fragment>\r\n          <div className=\"transaccionBase\"></div>\r\n          <svg className=\"lineasCortas\">\r\n            <line\r\n              key={i}\r\n              className=\"linea\"\r\n              x1=\"50%\"\r\n              y1=\"0\"\r\n              x2=\"50%\"\r\n              y2=\"50\"\r\n              style={{\r\n                stroke: colores[trans.destino],\r\n              }}\r\n            />\r\n          </svg>\r\n        </React.Fragment>\r\n      ))}\r\n      <div\r\n        className=\"firstActivity\"\r\n        id={actividades[0]?.id}\r\n        style={{\r\n          backgroundColor: coloresClaros[actividades[0]?.actor],\r\n          borderColor: colores[actividades[0]?.actor],\r\n        }}\r\n      >\r\n        {actividades[0]?.tipo}\r\n      </div>\r\n      <svg className=\"lineas\">{lines}</svg>\r\n      <div className=\"contenedorGrupos\">\r\n        <div className=\"contenedorPrimerGrupo\">\r\n          {grupos.map((grupo) => (\r\n            <Grupo\r\n              grupo={grupo}\r\n              actualizar={actualizar}\r\n              handleactualizar={handleactualizar}\r\n              actividades={actividades}\r\n              colores={colores}\r\n              coloresClaros={coloresClaros}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraphViz;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport GraphViz from \"./components/GraphViz/GraphViz\";\nimport OriginGraphViz from \"./components/OriginGraphViz/OriginGraphViz\";\n\nfunction App() {\n  return <GraphViz />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}